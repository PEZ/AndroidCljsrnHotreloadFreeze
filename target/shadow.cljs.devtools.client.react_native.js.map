{"version":3,"sources":["shadow/cljs/devtools/client/react_native.cljs"],"mappings":"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","names":["var_args","G__34549","shadow.cljs.devtools.client.react-native/devtools-msg","js/Error","x","shadow.cljs.devtools.client.env/log","js/console.log","y","shadow.cljs.devtools.client.react-native/script-eval","code","js/goog.global.eval","shadow.cljs.devtools.client.react-native/do-js-load","sources","seq__34564","cljs.core/seq","chunk__34565","count__34566","i__34567","map__34580","cljs.core/--destructure-map","cljs.core.get","temp__5753__auto__","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__34586","cljs.core/first","cljs.core/next","resource-name","js","src","shadow.cljs.devtools.client.react_native.devtools_msg","shadow.cljs.devtools.client.env/before-load-src","shadow.cljs.devtools.client.react-native/do-js-reload","msg","complete-fn","shadow.cljs.devtools.client.env.do_js_reload","cljs.core.assoc","fn-sym","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","shadow.cljs.devtools.client.react-native/noop","seq34596","self__4817__auto__","args","p__34605","map__34606","shadow.cljs.devtools.client.react-native/handle-build-complete","runtime","info","reload-info","map__34610","compiled","warnings","shadow.cljs.devtools.client.env/autoload","cljs.core/empty?","shadow.cljs.devtools.client.env/ignore-warnings","sources-to-get","shadow.cljs.devtools.client.env/filter-reload-sources","p1__34600#","shadow.cljs.devtools.client.shared/load-sources","shadow.cljs.devtools.client.react-native/global-eval","cljs.core.not_EQ_","js/eval","shadow.cljs.devtools.client.env/enabled","shadow.cljs.devtools.client.env/worker-client-id","cljs.core/PROTOCOL_SENTINEL","shadow.cljs.devtools.client.shared/Runtime","this","p__34646","map__34648","_","p__34656","map__34657","repl-sources","done","error","cljs.core.remove","shadow.cljs.devtools.client.env/src-is-loaded?","cljs.core.into","p__34662","map__34663","reload-namespaces","js-requires","sources-to-load","p__34667","map__34668","provides","and__4221__auto__","cljs.core/not","cljs.core/some","G__34675","shadow.remote.runtime.shared.call","cljs.core.map","p__34681","map__34682","e34686","ex","shadow.cljs.devtools.client.shared/add-plugin!","p__34690","map__34691","env","svc","shadow.remote.runtime.api/add-extension","shadow.cljs.devtools.client.env/patch-goog!","cljs.core/deref","js/console.warn","js/console.error","shadow.cljs.devtools.client.env/run-custom-notify!","shadow.cljs.devtools.client.env/add-warnings-to-info","p__34707","map__34708","event-op","client-id","cljs.core._EQ_","p__34721","map__34722","shadow.remote.runtime.api/del-extension","shadow.cljs.devtools.client.shared/init-runtime!","shadow.cljs.devtools.client.websocket/start","shadow.cljs.devtools.client.websocket/send","shadow.cljs.devtools.client.websocket/stop"],"sourcesContent":["(ns shadow.cljs.devtools.client.react-native\n  (:require\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.remote.runtime.api :as api]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.cljs.devtools.client.shared :as cljs-shared]\n    [shadow.cljs.devtools.client.websocket :as ws]))\n\n(defn devtools-msg\n  ([x]\n   (when env/log\n     (js/console.log x)))\n  ([x y]\n   (when env/log\n     (js/console.log x y))))\n\n(defn script-eval [code]\n  (js/goog.global.eval code))\n\n(defn do-js-load [sources]\n  (doseq [{:keys [resource-name js] :as src} sources]\n    (devtools-msg \"load JS\" resource-name)\n    (env/before-load-src src)\n    (script-eval (str js \"\\n//# sourceURL=\" resource-name))))\n\n(defn do-js-reload [msg sources complete-fn]\n  (env/do-js-reload\n    (assoc msg\n      :log-missing-fn\n      (fn [fn-sym]\n        (devtools-msg (str \"can't find fn \" fn-sym)))\n      :log-call-async\n      (fn [fn-sym]\n        (devtools-msg (str \"call async \" fn-sym)))\n      :log-call\n      (fn [fn-sym]\n        (devtools-msg (str \"call \" fn-sym))))\n    #(do-js-load sources)\n    complete-fn))\n\n(defn noop [& args])\n\n(defn handle-build-complete [runtime {:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled warnings]} info]\n\n    (when (and env/autoload\n               (or (empty? warnings) env/ignore-warnings))\n\n      (let [sources-to-get (env/filter-reload-sources info reload-info)]\n\n        (when (seq sources-to-get)\n          (cljs-shared/load-sources runtime sources-to-get #(do-js-reload msg % noop))\n          )))))\n\n(defn global-eval [js]\n  (if (not= \"undefined\" (js* \"typeof(module)\"))\n    ;; don't eval in the global scope in case of :npm-module builds running in webpack\n    (js/eval js)\n    ;; hack to force eval in global scope\n    ;; goog.globalEval doesn't have a return value so can't use that for REPL invokes\n    (js* \"(0,eval)(~{});\" js)))\n\n(when (and env/enabled (pos? env/worker-client-id))\n\n  (extend-type cljs-shared/Runtime\n    api/IEvalJS\n    (-js-eval [this code]\n      (global-eval code))\n\n    cljs-shared/IHostSpecific\n    (do-invoke [this {:keys [js] :as _}]\n      (global-eval js))\n\n    (do-repl-init [runtime {:keys [repl-sources]} done error]\n      (cljs-shared/load-sources\n        runtime\n        ;; maybe need to load some missing files to init REPL\n        (->> repl-sources\n             (remove env/src-is-loaded?)\n             (into []))\n        (fn [sources]\n          (do-js-load sources)\n          (done))))\n\n    (do-repl-require [runtime {:keys [sources reload-namespaces js-requires] :as msg} done error]\n      (let [sources-to-load\n            (->> sources\n                 (remove (fn [{:keys [provides] :as src}]\n                           (and (env/src-is-loaded? src)\n                                (not (some reload-namespaces provides)))))\n                 (into []))]\n\n        (if-not (seq sources-to-load)\n          (done [])\n          (shared/call runtime\n            {:op :cljs-load-sources\n             :to env/worker-client-id\n             :sources (into [] (map :resource-id) sources-to-load)}\n\n            {:cljs-sources\n             (fn [{:keys [sources] :as msg}]\n               (try\n                 (do-js-load sources)\n                 (done sources-to-load)\n                 (catch :default ex\n                   (error ex))))})))))\n\n  (cljs-shared/add-plugin! ::client #{}\n    (fn [{:keys [runtime] :as env}]\n      (let [svc {:runtime runtime}]\n        (api/add-extension runtime ::client\n          {:on-welcome\n           (fn []\n             ;; FIXME: why does this break stuff when done when the namespace is loaded?\n             ;; why does it have to wait until the websocket is connected?\n             (env/patch-goog!)\n             (devtools-msg (str \"#\"  (-> runtime :state-ref deref :client-id) \" ready!\")))\n\n           :on-disconnect\n           (fn []\n             (js/console.warn \"The shadow-cljs Websocket was disconnected.\"))\n\n           :ops\n           {:access-denied\n            (fn [msg]\n              (js/console.error\n                (str \"Stale Output! Your loaded JS was not produced by the running shadow-cljs instance.\"\n                     \" Is the watch for this build running?\")))\n\n            :cljs-build-configure\n            (fn [msg])\n\n            :cljs-build-start\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-start\" msg)\n              (env/run-custom-notify! (assoc msg :type :build-start)))\n\n            :cljs-build-complete\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-complete\" msg)\n              (let [msg (env/add-warnings-to-info msg)]\n                (handle-build-complete runtime msg)\n                (env/run-custom-notify! (assoc msg :type :build-complete))))\n\n            :cljs-build-failure\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-failure\" msg)\n              (env/run-custom-notify! (assoc msg :type :build-failure)))\n\n            ::env/worker-notify\n            (fn [{:keys [event-op client-id]}]\n              (cond\n                (and (= :client-disconnect event-op)\n                     (= client-id env/worker-client-id))\n                (js/console.warn \"The watch for this build was stopped!\")\n\n                ;; FIXME: what are the downside to just resuming on that worker?\n                ;; can't know if it changed something in the build\n                ;; all previous analyzer state is gone and might be out of sync with this instance\n                (= :client-connect event-op)\n                (js/console.warn \"The watch for this build was restarted. Reload required!\")\n                ))}})\n        svc))\n\n    (fn [{:keys [runtime] :as svc}]\n      (api/del-extension runtime ::client)))\n\n  (cljs-shared/init-runtime! {:host :react-native} ws/start ws/send ws/stop))"]}